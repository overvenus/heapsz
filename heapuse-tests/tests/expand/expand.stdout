#![feature(prelude_import)]
#[prelude_import]
use std::prelude::rust_2021::*;
#[macro_use]
extern crate std;
pub mod primitive {
    pub mod full {
        pub struct StructBool {
            #[heap(add)]
            pub field_bool: bool,
        }
        #[automatically_derived]
        impl ::core::default::Default for StructBool {
            #[inline]
            fn default() -> StructBool {
                StructBool {
                    field_bool: ::core::default::Default::default(),
                }
            }
        }
        impl ::heapuse::HeapSize for StructBool {
            fn approximate_heap_size(&self) -> usize {
                0 + ::heapuse::HeapSize::approximate_heap_size(&self.field_bool)
            }
        }
        pub struct StructPrimitives {
            #[heap(add)]
            pub field_bool: bool,
            #[heap(add)]
            pub field_u8: u8,
            #[heap(add)]
            pub field_i8: i8,
            #[heap(add)]
            pub field_u16: u16,
            #[heap(add)]
            pub field_i16: i16,
            #[heap(add)]
            pub field_u32: u32,
            #[heap(add)]
            pub field_i32: i32,
            #[heap(add)]
            pub field_u64: u64,
            #[heap(add)]
            pub field_i64: i64,
            #[heap(add)]
            pub field_u128: u128,
            #[heap(add)]
            pub field_i128: i128,
            #[heap(add)]
            pub field_usize: usize,
            #[heap(add)]
            pub field_isize: isize,
            #[heap(add)]
            pub field_f32: f32,
            #[heap(add)]
            pub field_f64: f64,
        }
        #[automatically_derived]
        impl ::core::default::Default for StructPrimitives {
            #[inline]
            fn default() -> StructPrimitives {
                StructPrimitives {
                    field_bool: ::core::default::Default::default(),
                    field_u8: ::core::default::Default::default(),
                    field_i8: ::core::default::Default::default(),
                    field_u16: ::core::default::Default::default(),
                    field_i16: ::core::default::Default::default(),
                    field_u32: ::core::default::Default::default(),
                    field_i32: ::core::default::Default::default(),
                    field_u64: ::core::default::Default::default(),
                    field_i64: ::core::default::Default::default(),
                    field_u128: ::core::default::Default::default(),
                    field_i128: ::core::default::Default::default(),
                    field_usize: ::core::default::Default::default(),
                    field_isize: ::core::default::Default::default(),
                    field_f32: ::core::default::Default::default(),
                    field_f64: ::core::default::Default::default(),
                }
            }
        }
        impl ::heapuse::HeapSize for StructPrimitives {
            fn approximate_heap_size(&self) -> usize {
                0 + ::heapuse::HeapSize::approximate_heap_size(&self.field_bool)
                    + ::heapuse::HeapSize::approximate_heap_size(&self.field_u8)
                    + ::heapuse::HeapSize::approximate_heap_size(&self.field_i8)
                    + ::heapuse::HeapSize::approximate_heap_size(&self.field_u16)
                    + ::heapuse::HeapSize::approximate_heap_size(&self.field_i16)
                    + ::heapuse::HeapSize::approximate_heap_size(&self.field_u32)
                    + ::heapuse::HeapSize::approximate_heap_size(&self.field_i32)
                    + ::heapuse::HeapSize::approximate_heap_size(&self.field_u64)
                    + ::heapuse::HeapSize::approximate_heap_size(&self.field_i64)
                    + ::heapuse::HeapSize::approximate_heap_size(&self.field_u128)
                    + ::heapuse::HeapSize::approximate_heap_size(&self.field_i128)
                    + ::heapuse::HeapSize::approximate_heap_size(&self.field_usize)
                    + ::heapuse::HeapSize::approximate_heap_size(&self.field_isize)
                    + ::heapuse::HeapSize::approximate_heap_size(&self.field_f32)
                    + ::heapuse::HeapSize::approximate_heap_size(&self.field_f64)
            }
        }
    }
    pub mod none {
        pub struct StructBool {
            pub field_bool: bool,
        }
        #[automatically_derived]
        impl ::core::default::Default for StructBool {
            #[inline]
            fn default() -> StructBool {
                StructBool {
                    field_bool: ::core::default::Default::default(),
                }
            }
        }
        impl ::heapuse::HeapSize for StructBool {
            fn approximate_heap_size(&self) -> usize {
                0
            }
        }
        pub struct StructPrimitives {
            pub field_bool: bool,
            pub field_u8: u8,
            pub field_i8: i8,
            pub field_u16: u16,
            pub field_i16: i16,
            pub field_u32: u32,
            pub field_i32: i32,
            pub field_u64: u64,
            pub field_i64: i64,
            pub field_u128: u128,
            pub field_i128: i128,
            pub field_usize: usize,
            pub field_isize: isize,
            pub field_f32: f32,
            pub field_f64: f64,
        }
        #[automatically_derived]
        impl ::core::default::Default for StructPrimitives {
            #[inline]
            fn default() -> StructPrimitives {
                StructPrimitives {
                    field_bool: ::core::default::Default::default(),
                    field_u8: ::core::default::Default::default(),
                    field_i8: ::core::default::Default::default(),
                    field_u16: ::core::default::Default::default(),
                    field_i16: ::core::default::Default::default(),
                    field_u32: ::core::default::Default::default(),
                    field_i32: ::core::default::Default::default(),
                    field_u64: ::core::default::Default::default(),
                    field_i64: ::core::default::Default::default(),
                    field_u128: ::core::default::Default::default(),
                    field_i128: ::core::default::Default::default(),
                    field_usize: ::core::default::Default::default(),
                    field_isize: ::core::default::Default::default(),
                    field_f32: ::core::default::Default::default(),
                    field_f64: ::core::default::Default::default(),
                }
            }
        }
        impl ::heapuse::HeapSize for StructPrimitives {
            fn approximate_heap_size(&self) -> usize {
                0
            }
        }
    }
    pub mod all {
        #[heap(all)]
        pub struct StructBool {
            pub field_bool: bool,
        }
        #[automatically_derived]
        impl ::core::default::Default for StructBool {
            #[inline]
            fn default() -> StructBool {
                StructBool {
                    field_bool: ::core::default::Default::default(),
                }
            }
        }
        impl ::heapuse::HeapSize for StructBool {
            fn approximate_heap_size(&self) -> usize {
                0 + ::heapuse::HeapSize::approximate_heap_size(&self.field_bool)
            }
        }
        #[heap(all)]
        pub struct StructPrimitives {
            pub field_bool: bool,
            pub field_u8: u8,
            pub field_i8: i8,
            pub field_u16: u16,
            pub field_i16: i16,
            pub field_u32: u32,
            pub field_i32: i32,
            pub field_u64: u64,
            pub field_i64: i64,
            pub field_u128: u128,
            pub field_i128: i128,
            pub field_usize: usize,
            pub field_isize: isize,
            pub field_f32: f32,
            pub field_f64: f64,
        }
        #[automatically_derived]
        impl ::core::default::Default for StructPrimitives {
            #[inline]
            fn default() -> StructPrimitives {
                StructPrimitives {
                    field_bool: ::core::default::Default::default(),
                    field_u8: ::core::default::Default::default(),
                    field_i8: ::core::default::Default::default(),
                    field_u16: ::core::default::Default::default(),
                    field_i16: ::core::default::Default::default(),
                    field_u32: ::core::default::Default::default(),
                    field_i32: ::core::default::Default::default(),
                    field_u64: ::core::default::Default::default(),
                    field_i64: ::core::default::Default::default(),
                    field_u128: ::core::default::Default::default(),
                    field_i128: ::core::default::Default::default(),
                    field_usize: ::core::default::Default::default(),
                    field_isize: ::core::default::Default::default(),
                    field_f32: ::core::default::Default::default(),
                    field_f64: ::core::default::Default::default(),
                }
            }
        }
        impl ::heapuse::HeapSize for StructPrimitives {
            fn approximate_heap_size(&self) -> usize {
                0 + ::heapuse::HeapSize::approximate_heap_size(&self.field_bool)
                    + ::heapuse::HeapSize::approximate_heap_size(&self.field_u8)
                    + ::heapuse::HeapSize::approximate_heap_size(&self.field_i8)
                    + ::heapuse::HeapSize::approximate_heap_size(&self.field_u16)
                    + ::heapuse::HeapSize::approximate_heap_size(&self.field_i16)
                    + ::heapuse::HeapSize::approximate_heap_size(&self.field_u32)
                    + ::heapuse::HeapSize::approximate_heap_size(&self.field_i32)
                    + ::heapuse::HeapSize::approximate_heap_size(&self.field_u64)
                    + ::heapuse::HeapSize::approximate_heap_size(&self.field_i64)
                    + ::heapuse::HeapSize::approximate_heap_size(&self.field_u128)
                    + ::heapuse::HeapSize::approximate_heap_size(&self.field_i128)
                    + ::heapuse::HeapSize::approximate_heap_size(&self.field_usize)
                    + ::heapuse::HeapSize::approximate_heap_size(&self.field_isize)
                    + ::heapuse::HeapSize::approximate_heap_size(&self.field_f32)
                    + ::heapuse::HeapSize::approximate_heap_size(&self.field_f64)
            }
        }
    }
    pub use full::StructBool;
    pub use full::StructPrimitives;
}
pub mod container {
    pub mod full {
        pub struct StructHeapMap {
            #[heap(add)]
            pub field_map: std::collections::HashMap<
                usize,
                crate::primitive::StructBool,
            >,
        }
        #[automatically_derived]
        impl ::core::default::Default for StructHeapMap {
            #[inline]
            fn default() -> StructHeapMap {
                StructHeapMap {
                    field_map: ::core::default::Default::default(),
                }
            }
        }
        impl ::heapuse::HeapSize for StructHeapMap {
            fn approximate_heap_size(&self) -> usize {
                0 + ::heapuse::HeapSize::approximate_heap_size(&self.field_map)
            }
        }
        pub struct StructVec {
            #[heap(add)]
            pub field_vec: Vec<crate::primitive::StructPrimitives>,
        }
        #[automatically_derived]
        impl ::core::default::Default for StructVec {
            #[inline]
            fn default() -> StructVec {
                StructVec {
                    field_vec: ::core::default::Default::default(),
                }
            }
        }
        impl ::heapuse::HeapSize for StructVec {
            fn approximate_heap_size(&self) -> usize {
                0 + ::heapuse::HeapSize::approximate_heap_size(&self.field_vec)
            }
        }
        pub struct StructContainers {
            #[heap(add)]
            pub field_vec: Vec<crate::primitive::StructPrimitives>,
            #[heap(add)]
            pub field_map: std::collections::HashMap<
                usize,
                crate::primitive::StructBool,
            >,
        }
        #[automatically_derived]
        impl ::core::default::Default for StructContainers {
            #[inline]
            fn default() -> StructContainers {
                StructContainers {
                    field_vec: ::core::default::Default::default(),
                    field_map: ::core::default::Default::default(),
                }
            }
        }
        impl ::heapuse::HeapSize for StructContainers {
            fn approximate_heap_size(&self) -> usize {
                0 + ::heapuse::HeapSize::approximate_heap_size(&self.field_vec)
                    + ::heapuse::HeapSize::approximate_heap_size(&self.field_map)
            }
        }
    }
    pub mod none {
        pub struct StructHeapMap {
            pub field_map: std::collections::HashMap<
                usize,
                crate::primitive::StructBool,
            >,
        }
        #[automatically_derived]
        impl ::core::default::Default for StructHeapMap {
            #[inline]
            fn default() -> StructHeapMap {
                StructHeapMap {
                    field_map: ::core::default::Default::default(),
                }
            }
        }
        impl ::heapuse::HeapSize for StructHeapMap {
            fn approximate_heap_size(&self) -> usize {
                0
            }
        }
        pub struct StructVec {
            pub field_vec: Vec<crate::primitive::StructPrimitives>,
        }
        #[automatically_derived]
        impl ::core::default::Default for StructVec {
            #[inline]
            fn default() -> StructVec {
                StructVec {
                    field_vec: ::core::default::Default::default(),
                }
            }
        }
        impl ::heapuse::HeapSize for StructVec {
            fn approximate_heap_size(&self) -> usize {
                0
            }
        }
        pub struct StructContainers {
            pub field_vec: Vec<crate::primitive::StructPrimitives>,
            pub field_map: std::collections::HashMap<
                usize,
                crate::primitive::StructBool,
            >,
        }
        #[automatically_derived]
        impl ::core::default::Default for StructContainers {
            #[inline]
            fn default() -> StructContainers {
                StructContainers {
                    field_vec: ::core::default::Default::default(),
                    field_map: ::core::default::Default::default(),
                }
            }
        }
        impl ::heapuse::HeapSize for StructContainers {
            fn approximate_heap_size(&self) -> usize {
                0
            }
        }
    }
    pub mod all {
        #[heap(all)]
        pub struct StructHeapMap {
            pub field_map: std::collections::HashMap<
                usize,
                crate::primitive::StructBool,
            >,
        }
        #[automatically_derived]
        impl ::core::default::Default for StructHeapMap {
            #[inline]
            fn default() -> StructHeapMap {
                StructHeapMap {
                    field_map: ::core::default::Default::default(),
                }
            }
        }
        impl ::heapuse::HeapSize for StructHeapMap {
            fn approximate_heap_size(&self) -> usize {
                0 + ::heapuse::HeapSize::approximate_heap_size(&self.field_map)
            }
        }
        #[heap(all)]
        pub struct StructVec {
            pub field_vec: Vec<crate::primitive::StructPrimitives>,
        }
        #[automatically_derived]
        impl ::core::default::Default for StructVec {
            #[inline]
            fn default() -> StructVec {
                StructVec {
                    field_vec: ::core::default::Default::default(),
                }
            }
        }
        impl ::heapuse::HeapSize for StructVec {
            fn approximate_heap_size(&self) -> usize {
                0 + ::heapuse::HeapSize::approximate_heap_size(&self.field_vec)
            }
        }
        #[heap(all)]
        pub struct StructContainers {
            pub field_vec: Vec<crate::primitive::StructPrimitives>,
            pub field_map: std::collections::HashMap<
                usize,
                crate::primitive::StructBool,
            >,
        }
        #[automatically_derived]
        impl ::core::default::Default for StructContainers {
            #[inline]
            fn default() -> StructContainers {
                StructContainers {
                    field_vec: ::core::default::Default::default(),
                    field_map: ::core::default::Default::default(),
                }
            }
        }
        impl ::heapuse::HeapSize for StructContainers {
            fn approximate_heap_size(&self) -> usize {
                0 + ::heapuse::HeapSize::approximate_heap_size(&self.field_vec)
                    + ::heapuse::HeapSize::approximate_heap_size(&self.field_map)
            }
        }
    }
    pub use full::StructHeapMap;
    pub use full::StructVec;
    pub use full::StructContainers;
}
mod unit {
    struct StructUnit;
    #[automatically_derived]
    impl ::core::default::Default for StructUnit {
        #[inline]
        fn default() -> StructUnit {
            StructUnit {}
        }
    }
    impl ::heapuse::HeapSize for StructUnit {
        fn approximate_heap_size(&self) -> usize {
            0
        }
    }
}
pub mod with_attr {
    use self::remote::Inner;
    pub mod remote {
        pub struct Inner(pub Box<u8>);
        #[automatically_derived]
        impl ::core::default::Default for Inner {
            #[inline]
            fn default() -> Inner {
                Inner(::core::default::Default::default())
            }
        }
    }
    pub mod remote_inner_heap_size {
        use heapuse::HeapSize;
        use super::remote;
        pub fn approximate_heap_size(t: &remote::Inner) -> usize {
            t.0.approximate_heap_size()
        }
    }
    pub struct Wtih {
        #[heap(with = "remote_inner_heap_size")]
        pub inner: Inner,
    }
    #[automatically_derived]
    impl ::core::default::Default for Wtih {
        #[inline]
        fn default() -> Wtih {
            Wtih {
                inner: ::core::default::Default::default(),
            }
        }
    }
    impl ::heapuse::HeapSize for Wtih {
        fn approximate_heap_size(&self) -> usize {
            0 + remote_inner_heap_size::approximate_heap_size(&self.inner)
        }
    }
}
